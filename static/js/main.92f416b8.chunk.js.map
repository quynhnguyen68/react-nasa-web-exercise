{"version":3,"sources":["sagas/apis.js","actions/types.js","reducers/index.js","reducers/items.js","store.js","actions/index.js","sagas/items.js","sagas/index.js","components/Icon.js","components/Button/index.js","components/TextInput.js","components/Loader/index.js","components/Popup/index.js","components/TextArea.js","theme/index.js","theme/Image.js","utils/String.js","utils/Image.js","PageItem/index.js","SearchInput/index.js","GridList/index.js","FormPopup/index.js","App.js","serviceWorker.js","index.js"],"names":["getItemList","query","axios","get","concat","then","response","catch","error","UI_SA_GET_ITEMS_LIST","rootReducer","combineReducers","items","state","arguments","length","undefined","action","type","Types","middlewares","sagaMiddleware","createSagaMiddleware","push","store","createStore","applyMiddleware","apply","saveItemsList","watchGetItemListtRequest","_ref","regenerator_default","a","wrap","_context","prev","next","call","Apis","sent","callback","dispatch","data","collection","localStorage","setItem","JSON","stringify","stop","_marked","_context2","takeEvery","_marked2","rootSaga","all","fork","sagas_marked","Icon","props","imgClassName","more","Object","objectWithoutProperties","react_default","createElement","assign","className","alt","defaultProps","Button","onClick","btnClassName","children","imageUrl","src","TextInput","inputClassName","onChange","onKeyDown","Loader","loaderClassName","Popup","isVisible","popupClassName","TextArea","theme","Image","DefaultImage","Edit","Delete","ActiveFavourite","Favourite","Search","Save","Close","StringUtil","value","String","isString","date","currentDate","Date","getMonth","getDate","getFullYear","ImageUtil","url","isStringAndNotEmpty","Item","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","_toggleFavourite","bind","assertThisInitialized","_onRemovePress","_onEditPress","tempData","objectSpread","isFavourite","forceUpdate","_this$props","index","onRemoveItem","_this$props2","onEditItem","_this$props3","detail","key","toString","href","target","components_Icon","isAvailableUrl","links","loading","center","getDateFormat","date_created","title","description","components_Button","Component","defaultTypes","image","SearchInput","searchKey","_onTextChange","_onPressSearch","_handleGetListCallback","event","setState","keyCode","components_TextInput","name","placeholder","ItemList","renderItem","map","item","FormPopup","selectedData","_selectedData","open","close","_onSavePress","info","_this$state","newData","onYesPress","_this$state2","components_Popup","components_TextArea","App","_onStoreChange","_removeItem","_editItem","bootstrap","defaults","baseURL","headers","post","timeout","console","log","unsubscribe","subscribe","getItem","parse","splice","_editPopup","getState","PageItem","_this2","src_SearchInput","GridList","src_FormPopup","ref","popup","MappedStoreComponent","connect","Boolean","window","location","hostname","match","run","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.92f416b8.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport function setup() {\r\n  axios.defaults.baseURL = 'https://images-api.nasa.gov/';\r\n  axios.defaults.headers.post['Content-Type'] = 'application/json';\r\n  axios.defaults.timeout = 10000;\r\n  console.log('Axios has been setup');\r\n}\r\n\r\nexport function getItemList(query) {\r\n    return axios.get(`search?q=${query}`)\r\n      .then(response => ({ response }))\r\n      .catch(error => ({ error }));\r\n}\r\n  ","export const UI_SA_GET_ITEMS_LIST = 'UI_SA_GET_ITEMS_LIST';\r\nexport const SA_RE_SAVE_ITEMS_LIST = 'SA_RE_SAVE_ITEMS_LIST';\r\nexport const UI_RE_RESET_ITEMS_LIST = 'UI_RE_RESET_ITEMS_LIST';\r\nexport const UI_RE_EDIT_ITEM = 'UI_RE_EDIT_ITEM';\r\nexport const UI_RE_TOGGLE_FAVOURITE_ITEM = 'UI_RE_TOGGLE_FAVOURITE_ITEM';\r\nexport const UI_RE_REMOVE_ITEM = 'UI_RE_REMOVE_ITEM';","import { combineReducers } from 'redux';\r\nimport items from './items';\r\n\r\nconst rootReducer = combineReducers({\r\n  items,\r\n});\r\n  \r\nexport default rootReducer;\r\n  ","import * as Types from '../actions/types';\r\n\r\nexport default function (state = [], action) {\r\n    switch (action.type) {\r\n      case Types.SA_RE_SAVE_ITEMS_LIST:\r\n        return action.items;\r\n      case Types.UI_RE_TOGGLE_FAVOURITE_ITEM:\r\n      case Types.UI_RE_REMOVE_ITEM:\r\n      case Types.UI_RE_EDIT_ITEM:\r\n        return state;\r\n      case Types.UI_SA_GET_ITEMS_LIST:\r\n      case Types.UI_RE_RESET_ITEMS_LIST:\r\n        return [];\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  ","import { createStore, applyMiddleware } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootReducer from './reducers';\r\n\r\nconst middlewares = [];\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  const logger = createLogger();\r\n  middlewares.push(logger);\r\n}\r\n\r\nexport const sagaMiddleware = createSagaMiddleware();\r\nmiddlewares.push(sagaMiddleware);\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport default store;\r\n","import * as Types from './types';\r\n\r\nexport const getItemsList = (query, callback) => ({\r\n    type: Types.UI_SA_GET_ITEMS_LIST,\r\n    query,\r\n    callback,\r\n});\r\n\r\nexport const saveItemsList = items => ({\r\n    type: Types.SA_RE_SAVE_ITEMS_LIST,\r\n    items,\r\n});\r\n\r\nexport const toggleFavouriteItem = () => ({\r\n    type: Types.UI_RE_TOGGLE_FAVOURITE_ITEM,\r\n});\r\n\r\nexport const editItem = () => ({\r\n    type: Types.UI_RE_EDIT_ITEM,\r\n});\r\n\r\nexport const resetItemsList = () => ({\r\n    type: Types.UI_RE_RESET_ITEMS_LIST,\r\n});\r\n\r\nexport const removeItem = () => ({\r\n    type: Types.UI_RE_REMOVE_ITEM,\r\n});","import { call, takeEvery } from 'redux-saga/effects';\r\nimport * as Apis from './apis';\r\nimport * as Types from '../actions/types';\r\nimport store from '../store';\r\nimport { saveItemsList } from '../actions';\r\n\r\nfunction* getItemList(action) {\r\n    const { response, error } = yield call(Apis.getItemList, action.query);\r\n  \r\n    if(response){\r\n        action.callback(null);\r\n        store.dispatch(saveItemsList(response.data.collection.items));\r\n        localStorage.setItem('items', JSON.stringify(response.data.collection.items));\r\n    }\r\n\r\n    if(error) {\r\n        action.callback('Error');\r\n    }\r\n}\r\n  \r\nexport function* watchGetItemListtRequest() {\r\n    yield takeEvery(Types.UI_SA_GET_ITEMS_LIST, getItemList);\r\n}\r\n  ","import { all, fork } from 'redux-saga/effects';\r\nimport { watchGetItemListtRequest } from './items';\r\n\r\nexport default function* rootSaga() {\r\n    yield all([ \r\n        fork(watchGetItemListtRequest),\r\n    ]);\r\n  }\r\n  \r\n  ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../theme/Styles.scss';\r\n\r\nconst Icon = (props) => {\r\n  const { imgClassName, ...more } = props;\r\n  return (\r\n    <img\r\n        className={`image ${imgClassName}`}\r\n        {...more} alt=\"\" \r\n    />\r\n  );\r\n}\r\n\r\nIcon.propTypes = {\r\n    imgClassName: PropTypes.string,\r\n};\r\n\r\nIcon.defaultProps = {\r\n    imgClassName: \"\",\r\n};\r\n\r\nexport default Icon;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.scss';\r\n\r\nconst Button =  (props) => {\r\nconst { onClick, btnClassName, children, imageUrl, ...more } = props;\r\n  return (\r\n    <button \r\n        className={`button ${btnClassName}`}\r\n        onClick={onClick} \r\n        {...more}\r\n    >\r\n        {imageUrl && <img src={imageUrl} alt=\"\" />}\r\n        {children}\r\n    </button>\r\n  );\r\n}\r\n\r\nButton.propTypes = {\r\n    btnClassName: PropTypes.string,\r\n    imageUrl: PropTypes.string,\r\n    onClick: PropTypes.func,\r\n};\r\n\r\nButton.defaultProps = {\r\n    btnClassName: \"\",\r\n    imageUrl: \"\",\r\n    onClick: () => {},\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../theme/Styles.scss';\r\n\r\nconst TextInput = (props) => {\r\n  const { inputClassName, onChange, onKeyDown, ...more } = props;\r\n  return (\r\n    <input\r\n      className={`text-input ${inputClassName}`}\r\n      onChange={onChange}\r\n      onKeyDown={onKeyDown}\r\n      {...more}\r\n    />\r\n  );\r\n}\r\n \r\nTextInput.propTypes = {\r\n    inputClassName: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    onKeyDown: PropTypes.func,\r\n};\r\n\r\nTextInput.defaultProps = {\r\n    inputClassName: \"\",\r\n    onChange: () => {},\r\n    onKeyDown: () => {},\r\n};\r\n\r\nexport default TextInput;","import React from 'react';\r\nimport './styles.scss';\r\n\r\nexport default function (props) {\r\nconst { loaderClassName } = props;\r\n  return (\r\n    <div className={`loader ${loaderClassName}`}></div>\r\n  );\r\n}\r\n ","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.scss';\r\n\r\nconst Popup = (props) => {\r\n  const { isVisible, children, popupClassName, ...more } = props;\r\n  return (\r\n    <div\r\n      className={isVisible ? `popup ${popupClassName}`: \"invisible\"}\r\n      {...more}\r\n    >\r\n        {children}\r\n    </div>\r\n  );\r\n}\r\n \r\nPopup.propTypes = {\r\n    isVisible: PropTypes.bool,\r\n};\r\nPopup.defaultProps = {\r\n    isVisible: false,\r\n};\r\n\r\nexport default Popup;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../theme/Styles.scss';\r\n\r\nconst TextArea = (props) => {\r\n  const { inputClassName, onChange, onKeyDown, ...more } = props;\r\n  return (\r\n    <textarea\r\n      className={`text-input ${inputClassName}`}\r\n      onChange={onChange}\r\n      onKeyDown={onKeyDown}\r\n      {...more}\r\n    />\r\n  );\r\n}\r\n \r\nTextArea.propTypes = {\r\n    inputClassName: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    onKeyDown: PropTypes.func,\r\n};\r\n\r\nTextArea.defaultProps = {\r\n    inputClassName: \"\",\r\n    onChange: () => {},\r\n    onKeyDown: () => {},\r\n};\r\n\r\nexport default TextArea;","import Image from './Image';\r\n\r\nexport default {\r\n  Image,\r\n};\r\n","const Image = {\r\n    DefaultImage: '/images/default_image.png',\r\n    Edit: '/icon/edit.png',\r\n    Delete: '/icon/delete.png',\r\n    ActiveFavourite: '/icon/active_favourite.png',\r\n    Favourite: '/icon/favourite.png',\r\n    Search: '/icon/search.png',\r\n    Save: '/icon/save.png',\r\n    Close: '/icon/close.png',\r\n};\r\n  \r\n  export default Image\r\n  ","export default class StringUtil {\r\n  static isString(value) {\r\n    return typeof value === 'string' || value instanceof String;\r\n  }\r\n\r\n  static isStringAndNotEmpty(value) {\r\n    if (value && StringUtil.isString(value)) return true;\r\n    return false;\r\n  }\r\n\r\n  static getDateFormat(date){\r\n    const months = [\"JAN\", \"FEB\", \"MAR\",\"APR\", \"MAY\", \"JUN\", \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\"];\r\n    const currentDate = new Date(date);\r\n    const formattedDate =  months[currentDate.getMonth()] + \"-\" + currentDate.getDate() + \"-\" + currentDate.getFullYear()\r\n    return formattedDate;\r\n  }\r\n}\r\n","import theme from '../theme';\r\nimport StringUtil from './String';\r\n\r\nexport default class ImageUtil {\r\n  static isAvailableUrl(url) {\r\n    if (!StringUtil.isStringAndNotEmpty(url)) { return theme.Image.DefaultImage; }\r\n    return url;\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../App.css';\r\nimport { Icon, Button } from '../components';\r\nimport theme from '../theme';\r\nimport { ImageUtil, StringUtil } from '../utils';\r\nimport '../theme/Styles.scss';\r\nimport './styles.scss';\r\nimport store from '../store';\r\nimport { toggleFavouriteItem } from '../actions';\r\n\r\nclass Item extends Component {\r\n    static propTypes = {\r\n      image: PropTypes.string,\r\n      onEditItem: PropTypes.func,\r\n      onRemoveItem: PropTypes.func,\r\n      isFavourite: PropTypes.bool,\r\n      index: PropTypes.number,\r\n    }\r\n\r\n    static defaultTypes = {\r\n      image:\"\",\r\n      onEditItem: () => {},\r\n      onRemoveItem: () => {},\r\n      isFavourite: false,\r\n      index: 0,\r\n    }\r\n    \r\n    constructor(props){\r\n      super(props);\r\n      this._toggleFavourite = this._toggleFavourite.bind(this);\r\n      this._onRemovePress = this._onRemovePress.bind(this);\r\n      this._onEditPress = this._onEditPress.bind(this);\r\n    }\r\n\r\n    _toggleFavourite(){\r\n      const { data } = this.props;\r\n      const tempData = { ...data, isFavourite: !(!!data.isFavourite) };\r\n      Object.assign(data, tempData);\r\n      store.dispatch(toggleFavouriteItem());\r\n      this.forceUpdate();\r\n    }\r\n\r\n    _onRemovePress(){\r\n      const { index, onRemoveItem } = this.props;\r\n      onRemoveItem(index);\r\n    }\r\n\r\n    _onEditPress(){\r\n      const { data, onEditItem } = this.props;\r\n      onEditItem(data);\r\n    }\r\n\r\n    render(){\r\n        const { data, index } = this.props;\r\n        const detail = data && data.data && data.data[0];\r\n        return (\r\n            <div className=\"item-container\" key={index.toString()}>\r\n                <a href={data && data.href} target=\"_blank\">\r\n                  <Icon \r\n                    src={ImageUtil.isAvailableUrl(data && data.links && data.links[0].href)} \r\n                    imgClassName=\"shadow-item img-container\"\r\n                    loading=\"lazy\" \r\n                  />\r\n                </a>\r\n                <div className=\"info-container\">\r\n                  <p>{detail.center}</p>\r\n                  <p>{StringUtil.getDateFormat(detail.date_created)}</p>\r\n                </div>\r\n                <h1>{detail.title}</h1>\r\n                <div className=\"multiline-text txt-content\">\r\n                  {detail.description}\r\n                </ div>\r\n                <div className=\"button-container\">\r\n                  <Button \r\n                    imageUrl={data.isFavourite ? theme.Image.ActiveFavourite : theme.Image.Favourite} \r\n                    onClick={this._toggleFavourite} \r\n                  />\r\n                  <Button \r\n                    imageUrl={theme.Image.Edit}\r\n                    btnClassName=\"button-edit\"\r\n                    onClick={this._onEditPress} \r\n                  />\r\n                  <Button \r\n                    imageUrl={theme.Image.Delete}\r\n                    onClick={this._onRemovePress} \r\n                  />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;\r\n","import React, { Component } from 'react';\r\nimport { Button, TextInput, Loader } from '../components';\r\nimport theme from '../theme';\r\nimport './styles.scss';\r\nimport store from '../store';\r\nimport { getItemsList } from '../actions';\r\n\r\nclass SearchInput extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            searchKey: \"\",\r\n            loading: false,\r\n        };\r\n\r\n        this._onTextChange = this._onTextChange.bind(this);\r\n        this._onPressSearch = this._onPressSearch.bind(this);\r\n        this._handleGetListCallback = this._handleGetListCallback.bind(this);\r\n    }\r\n\r\n    _onTextChange(event){\r\n        this.setState({\r\n            searchKey: event.target.value,\r\n        });\r\n\r\n        if(event.keyCode === 13){\r\n            this._onPressSearch();\r\n        }\r\n    }\r\n\r\n    _onPressSearch(){\r\n        const { searchKey } = this.state;\r\n        if(searchKey) {\r\n            store.dispatch(getItemsList(searchKey, this._handleGetListCallback));\r\n            this.setState({\r\n                loading: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    _handleGetListCallback(error){\r\n        this.setState({\r\n            loading: false,\r\n        });\r\n    }\r\n\r\n    render(){\r\n        const { loading } = this.state;\r\n        return(\r\n            <div className=\"container\">\r\n                <h1>NASA Collection</h1>\r\n                <div className=\"search-container\">\r\n                    <TextInput\r\n                        name=\"searchKey\"\r\n                        inputClassName=\"input\"\r\n                        placeholder=\"Enter something\"\r\n                        onChange={this._onTextChange}\r\n                        onKeyDown={this._onTextChange}\r\n                    />\r\n                    <Button \r\n                        imageUrl={theme.Image.Search} \r\n                        onClick={this._onPressSearch}\r\n                    />\r\n                </div>\r\n                {loading && <Loader loaderClassName=\"loader-container\"/> }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchInput;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.scss';\r\n\r\nclass ItemList extends Component {\r\n  static propTypes = {\r\n    // columns: PropTypes.number.isRequired,\r\n    // gap: PropTypes.number.isRequired,\r\n    data: PropTypes.arrayOf(PropTypes.shape),\r\n  }\r\n\r\n  static defaultTypes = {\r\n    data: [],\r\n  }\r\n\r\n  render() {\r\n    const { data, renderItem } = this.props;\r\n    return (\r\n      <div className=\"grid\">\r\n          {data.map((item, index) => {\r\n              return renderItem(item, index);\r\n          })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ItemList;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Popup, Button, TextInput, TextArea } from '../components';\r\nimport '../theme/Styles.scss';\r\nimport './styles.scss';\r\nimport theme from '../theme';\r\nimport store from '../store';\r\nimport { editItem } from '../actions';\r\n\r\nclass FormPopup extends Component {\r\n    static propTypes = {\r\n        onYesPress: PropTypes.func,\r\n    }\r\n\r\n    static defaultTypes = {\r\n        onYesPress: () => {},\r\n    }\r\n    \r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        isVisible: false,\r\n        selectedData: null,\r\n        image: '',\r\n        title: '',\r\n        center: '',\r\n        description: '',\r\n      };\r\n      this._selectedData = null;\r\n      this.open = this.open.bind(this);\r\n      this.close = this.close.bind(this);\r\n      this._onTextChange = this._onTextChange.bind(this);\r\n      this._onSavePress = this._onSavePress.bind(this);\r\n    }\r\n\r\n    open(info) {\r\n        this._selectedData = info;\r\n        const detail = info && info.data && info.data[0];\r\n        this.setState({\r\n            isVisible: true,\r\n            image: info && info.links && info.links[0].href,\r\n            title: detail && detail.title,\r\n            center: detail && detail.center,\r\n            description: detail && detail.description,\r\n        });\r\n    }\r\n\r\n    close() {\r\n        this._selectedData = null;\r\n        this.setState({\r\n            isVisible: false,\r\n            image: '',\r\n            title: '',\r\n            center: '',\r\n            description: '',\r\n        });\r\n    }\r\n\r\n    _onTextChange(event) {\r\n        const { state } = this;\r\n        state[event.target.name] = event.target.value;\r\n        this.setState(state);\r\n    }\r\n\r\n    _onSavePress() {\r\n        const { image, title, center, description } = this.state;\r\n        if (this._selectedData){\r\n            const newData = {\r\n                ...this._selectedData,\r\n                data: [\r\n                    {\r\n                        ...this._selectedData.data[0],\r\n                        title,\r\n                        center,\r\n                        description,\r\n                    }\r\n                ],\r\n                links: [\r\n                    {\r\n                        ...this._selectedData.links[0],\r\n                        href: image,\r\n                    }\r\n                ]\r\n            };\r\n\r\n            Object.assign(this._selectedData, newData);\r\n            store.dispatch(editItem());\r\n            this.props.onYesPress();\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { isVisible, image, title, center, description, error } = this.state;\r\n        return (\r\n            <Popup\r\n                popupClassName=\"form-popup\"\r\n                isVisible={isVisible}\r\n            >\r\n                <h2>Edit item</h2>\r\n                {error && <p>Please fill all fields</p>}\r\n                <div className=\"input-container\">\r\n                    <p>Title</p>\r\n                    <TextInput \r\n                        name=\"title\"\r\n                        inputClassName=\"input-form\"\r\n                        value={title}\r\n                        onChange={this._onTextChange}\r\n                        placeholder=\"Enter title\" \r\n                    />\r\n                </div>\r\n\r\n                <div className=\"input-container\">\r\n                    <p>Thumbnail image</p>\r\n                    <TextInput \r\n                        name=\"image\"\r\n                        inputClassName=\"input-form\"\r\n                        value={image} \r\n                        onChange={this._onTextChange}\r\n                        placeholder=\"Enter image url\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"input-container\">\r\n                    <p>Center name</p>\r\n                    <TextInput \r\n                        type=\"text\"\r\n                        name=\"center\"\r\n                        inputClassName=\"input-form\"\r\n                        value={center} \r\n                        onChange={this._onTextChange}\r\n                        placeholder=\"Enter center name\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"input-container\">\r\n                    <p>Description</p>\r\n                    <TextArea \r\n                        name=\"description\"\r\n                        inputClassName=\"input-form textarea-form\"\r\n                        value={description}\r\n                        onChange={this._onTextChange}\r\n                        placeholder=\"Enter description\"  \r\n                    />\r\n                </div>\r\n    \r\n                <div className=\"button-container\">\r\n                    <Button\r\n                        imageUrl={theme.Image.Save}\r\n                        btnClassName=\"button-save\"\r\n                        onClick={this._onSavePress} \r\n                    >\r\n                        <p>Save</p>\r\n                    </Button>\r\n                    <Button\r\n                        btnClassName=\"button-close\"\r\n                        imageUrl={theme.Image.Close}\r\n                        onClick={this.close} \r\n                    />\r\n                </div>\r\n            </Popup>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FormPopup;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PageItem from './PageItem';\r\nimport SearchInput from './SearchInput';\r\nimport GridList from './GridList';\r\nimport './App.css';\r\nimport { setup as setupApi } from './sagas/apis';\r\nimport store from './store';\r\nimport { saveItemsList, removeItem } from'./actions';\r\nimport FormPopup from './FormPopup';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedData: {},\r\n    }\r\n\r\n    this._onStoreChange = this._onStoreChange.bind(this);\r\n    this._removeItem = this._removeItem.bind(this);\r\n    this._editItem = this._editItem.bind(this);\r\n    this.renderItem = this.renderItem.bind(this);\r\n    this.bootstrap();\r\n  }\r\n\r\n  componentDidMount(){\r\n    setupApi();\r\n    this.unsubscribe = store.subscribe(this._onStoreChange);\r\n  }\r\n\r\n  async bootstrap() {\r\n    const items = await localStorage.getItem('items');\r\n    if(items) store.dispatch(saveItemsList(JSON.parse(items)));\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    this.subscribe();\r\n  }\r\n\r\n  _removeItem(index){\r\n    const { items } = this.props;\r\n    if(index !== -1){\r\n      items.splice(index, 1);\r\n      store.dispatch(removeItem());\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  _editItem(data){\r\n    this.setState({\r\n      selectedData: data,\r\n    });\r\n    this._editPopup.open(data);\r\n  }\r\n\r\n  _onStoreChange(){\r\n    const { items } = store.getState();\r\n    if(items){\r\n      localStorage.setItem('items', JSON.stringify(items));\r\n    }\r\n  }\r\n\r\n  renderItem(item, index) {\r\n    return(\r\n      <PageItem \r\n        key={index.toString()}\r\n        index={index}\r\n        data={item}\r\n        onRemoveItem={this._removeItem}\r\n        onEditItem={this._editItem}\r\n      />\r\n    );\r\n  }\r\n\r\n  render(){\r\n    const { items } = this.props;\r\n    return (\r\n      <div className=\"App\">\r\n        <SearchInput />\r\n        <GridList \r\n          data={items}\r\n          renderItem={this.renderItem}\r\n        />\r\n        <FormPopup \r\n          ref={(popup => { this._editPopup = popup})}\r\n          onYesPress={() => this.forceUpdate()}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({ items: state.items });\r\nconst MappedStoreComponent = connect(\r\n  mapStateToProps,\r\n  {},\r\n)(App);\r\n\r\nexport default MappedStoreComponent;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport rootSaga from './sagas';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store, { sagaMiddleware } from './store';\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n  \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}